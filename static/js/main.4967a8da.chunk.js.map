{"version":3,"sources":["components/recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["Recipe","recipe","useState","showColories","setShowColories","showIngredients","setShowIngredients","className","label","src","image","calories","toFixed","digest","map","item","total","ingredients","text","weight","onClick","App","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","axios","then","response","console","log","data","hits","hit","onSubmit","e","preventDefault","placeholder","value","onChange","target","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAmDeA,EA/CA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAAY,EAEcC,oBAAS,GAFvB,mBAEnBC,EAFmB,KAELC,EAFK,OAGoBF,oBAAS,GAH7B,mBAGnBG,EAHmB,KAGFC,EAHE,KAK1B,OACG,sBAAKC,UAAU,SAAf,UACG,oBAAIA,UAAU,gBAAd,SAA+BN,EAAOO,QACtC,sBAAKD,UAAU,eAAf,UACG,qBAAKA,UAAU,cAAcE,IAAKR,EAAOS,QACzC,sBAAKH,UAAU,mBAAf,UAAkC,6CAAuBN,EAAOU,SAASC,QAAQ,MAE9ET,GAAgB,qBAAKI,UAAU,sBAAf,SACZN,EAAOY,OAAOC,KAAI,SAAAC,GAAI,OACpB,sBAAKR,UAAU,eAAf,cAAgD,iCAAOQ,EAAKP,MAAZ,OAA2BO,EAAKC,MAAMJ,QAAQ,KAA3DG,EAAKP,YAK9CH,GAAmB,sBAAKE,UAAU,sBAAf,UACnB,8CACCN,EAAOgB,YAAYH,KAAI,SAAAC,GAAI,OACzB,sBAAKR,UAAU,eAAf,UACA,qBAAKE,IAAKM,EAAKL,MAAMK,EAAKL,MAzBxB,4EA0BF,oCAAsB,iCAAOK,EAAKG,KAAZ,eAAkCH,EAAKI,OAAOP,QAAQ,GAA5E,UAAUG,EAAKG,eAOlBf,EAAe,qBAAKI,UAAU,oBAAf,SAAmC,wBAAQA,UAAU,iBACpEa,QAAS,WAAOhB,GAAgB,GAAQE,GAAmB,IADT,qBAElD,qBAAKC,UAAU,oBAAf,SAAmC,wBAAQA,UAAU,iBACrDa,QAAS,WAAOhB,GAAgB,GAAOE,GAAmB,IADvB,6BAInCD,EAAkB,qBAAKE,UAAU,oBAAf,SAAmC,wBAAQA,UAAU,iBACvEa,QAAS,WAAOd,GAAmB,GAAQF,GAAgB,IADN,qBAErD,qBAAKG,UAAU,oBAAf,SAAmC,wBAAQA,UAAU,iBACrDa,QAAS,WAAOd,GAAmB,GAAOF,GAAgB,IADvB,uCCInCiB,EAtCH,WAAO,IAAD,EAEcnB,mBAAS,IAFvB,mBAEToB,EAFS,KAEAC,EAFA,OAGYrB,mBAAS,IAHrB,mBAGTsB,EAHS,KAGDC,EAHC,OAIUvB,mBAAS,WAJnB,mBAITwB,EAJS,KAIFC,EAJE,KAMhBC,qBAAU,WACRC,MAAA,0CAA6CH,EAA7C,mBATW,WASX,oBAXY,mCAWZ,uDACCI,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZR,EAAWQ,EAASG,KAAKC,KAAKrB,KAAI,SAAAsB,GAAG,OAAEA,EAAInC,gBAE7C,CAACyB,IAYH,OACE,sBAAKnB,UAAU,MAAf,UAEE,uBAAM8B,SARK,SAAAC,GACbA,EAAEC,iBACFZ,EAASH,IAMP,UACE,uBAAOgB,YAAY,qBAAqBC,MAAOjB,EAAQkB,SAdvC,SAAAJ,GACpBA,EAAEC,iBACFd,EAAUa,EAAEK,OAAOF,UAaf,wBAAQG,KAAK,SAAb,uBAEF,qBAAKrC,UAAU,UAAf,SACCe,EAAQR,KAAI,SAAAb,GAAM,OAAI,cAAC,EAAD,CAAQA,OAAQA,GAAaA,EAAOO,gBC7BlDqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4967a8da.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst img_not_img = 'https://cdn.pixabay.com/photo/2017/01/25/17/35/picture-2008484_1280.png'\r\n\r\nconst Recipe = ({recipe}) => {\r\n\r\n   const [showColories, setShowColories] = useState(false)\r\n   const [showIngredients, setShowIngredients] = useState(false)\r\n\r\n   return (\r\n      <div className='recipe'>\r\n         <h2 className='recipe__title'>{recipe.label}</h2>\r\n         <div className='recipe__info'>\r\n            <img className='recipe__img' src={recipe.image} />\r\n            <div className='recipe__colories'><span>Colories:</span>{recipe.calories.toFixed(1)}</div>\r\n            {\r\n               showColories && <div className='recipe__composition'>\r\n                  {recipe.digest.map(item => (\r\n                     <div className='recipe__item' key={item.label}> <span>{item.label}:</span>{item.total.toFixed(1)}</div>)\r\n                  )}\r\n               </div>\r\n            }\r\n            {\r\n               showIngredients && <div className='recipe__composition'>\r\n               <h2>Ingredients:</h2>\r\n               {recipe.ingredients.map(item => (\r\n                  <div className='recipe__item'>\r\n                  <img src={item.image?item.image:img_not_img}/>\r\n                  <div key={item.text}> <span>{item.text}, weight:</span>{item.weight.toFixed(1)} gram</div>\r\n                  </div>)\r\n               )}\r\n               </div>\r\n               \r\n            }\r\n            {\r\n               showColories ? <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowColories(false); setShowIngredients(false) }}>Close</button></div> :\r\n               <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowColories(true); setShowIngredients(false) }}>Show colories</button></div>\r\n            }\r\n            {\r\n               showIngredients ? <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowIngredients(false); setShowColories(false)}}>Close</button></div> :\r\n               <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowIngredients(true); setShowColories(false)}}>Show ingredients</button></div>\r\n            }\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Recipe","import { useEffect, useState } from 'react';\nimport './scss/App.scss';\nimport * as axios from 'axios'\nimport Recipe from './components/recipe';\n\nconst API_KEY = 'e58fb8988ab9d94df69a34ae0e3a1bef'\n\nconst API_ID = 'e8f0abb2'\n\nconst App = () => {\n  \n  const [recipes, setRecipes] = useState([])\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('chicken')\n\n  useEffect(()=>{\n    axios.get(`https://api.edamam.com/search?q=${query}&app_id=${API_ID}&app_key=${API_KEY}&from=0&to=20&calories=591-722&health=alcohol-free`)\n    .then(response=>{\n      console.log(response)\n      setRecipes(response.data.hits.map(hit=>hit.recipe))\n    })\n  },[query])\n  \n  const onChangeInput = e => {\n    e.preventDefault()\n    setSearch(e.target.value)\n  }\n\n  const Submit = e => {\n    e.preventDefault()\n    setQuery(search)\n  }\n\n  return (\n    <div className=\"App\">\n\n      <form onSubmit={Submit}>\n        <input placeholder='Edit your query...' value={search} onChange={onChangeInput}/>\n        <button type='submit'>Search</button>  \n      </form>\n      <div className=\"recipes\">\n      {recipes.map(recipe => <Recipe recipe={recipe} key={recipe.label}/>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}