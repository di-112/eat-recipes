[{"C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\index.js":"1","C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\App.js":"2","C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\reportWebVitals.js":"3","C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\components\\recipe.jsx":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":1220,"mtime":1610709074188,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":2386,"mtime":1610703905600,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"tlfyk2",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"12"},"C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\index.js",[],["20","21"],"C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\App.js",[],"C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\reportWebVitals.js",[],"C:\\Users\\Dmitry\\Documents\\#projects\\eat-recipes\\src\\components\\recipe.jsx",["22","23"],"import React, { useState } from 'react'\r\n\r\nconst img_not_img = 'https://cdn.pixabay.com/photo/2017/01/25/17/35/picture-2008484_1280.png'\r\n\r\nconst Recipe = ({recipe}) => {\r\n\r\n   const [showColories, setShowColories] = useState(false)\r\n   const [showIngredients, setShowIngredients] = useState(false)\r\n\r\n   return (\r\n      <div className='recipe'>\r\n         <h2 className='recipe__title'>{recipe.label}</h2>\r\n         <div className='recipe__info'>\r\n            <img className='recipe__img' src={recipe.image} />\r\n            <div className='recipe__colories'><span>Colories:</span>{recipe.calories.toFixed(1)}</div>\r\n            {\r\n               showColories && <div className='recipe__composition'>\r\n                  {recipe.digest.map(item => (\r\n                     <div className='recipe__item' key={item.label}> <span>{item.label}:</span>{item.total.toFixed(1)}</div>)\r\n                  )}\r\n               </div>\r\n            }\r\n            {\r\n               showIngredients && <div className='recipe__composition'>\r\n               <h2>Ingredients:</h2>\r\n               {recipe.ingredients.map(item => (\r\n                  <div className='recipe__item'>\r\n                  <img src={item.image?item.image:img_not_img}/>\r\n                  <div key={item.text}> <span>{item.text}, weight:</span>{item.weight.toFixed(1)} gram</div>\r\n                  </div>)\r\n               )}\r\n               </div>\r\n               \r\n            }\r\n            {\r\n               showColories ? <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowColories(false); setShowIngredients(false) }}>Close</button></div> :\r\n               <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowColories(true); setShowIngredients(false) }}>Show colories</button></div>\r\n            }\r\n            {\r\n               showIngredients ? <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowIngredients(false); setShowColories(false)}}>Close</button></div> :\r\n               <div className='button__container'><button className='recipe__button' \r\n               onClick={() => {setShowIngredients(true); setShowColories(false)}}>Show ingredients</button></div>\r\n            }\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Recipe",{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":14,"column":13,"nodeType":"30","endLine":14,"endColumn":63},{"ruleId":"28","severity":1,"message":"29","line":28,"column":19,"nodeType":"30","endLine":28,"endColumn":65},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]